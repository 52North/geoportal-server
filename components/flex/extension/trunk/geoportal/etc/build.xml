<?xml version="1.0" encoding="utf-8"?>
<!--
	Build file for a Flex project with:
	- Optimized Modules
	- A single library
	- CSS compiled into a SWF and loaded dynamically
	- An HTML wrapper that includes a Remoting Endpoint
	- An image directory for runtime assets
	
-->
<project name="Geoportal Server Viewer" basedir="." default="main">
   
    <!-- This uses a build file for all the dynamic properties -->
    <property file="build.properties" />
	<!-- This is what you have to include to be able to use "mxml" and "compc" ant tasks -->
    <taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />
	
	<!-- This is what you have to include to be able to use the "foreach" ant task -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
	    <pathelement location="ant-contrib-1.0b3.jar"/>
	  </classpath>

	</taskdef> 
	
	
	
	<!-- 
		Target: main
		Specifies the main target as running the following other targets: 
		- clean: 			deletes the deployment directory
		- compile:			compiles the main application SWF file
		- compiles-modules:	compiles all the modules SWF files
		- compile-css:		compiles the CSS into a SWF file
		- compile-wrapper:	builds the HTML wrapper for the application
		- copy-images:		copies runtime images into the deployment directory
		- clean-up:			deletes generated file after the build
	-->
	<target name="main" depends="clean, presetup, compile, compile-modules, compile-css, compile-wrapper, copy-images, clean-up" />
	
	<!--
		Target: clean
		Deletes the deployment directory
	-->
	<target name="clean">
		<delete dir="${DEPLOY_DIR}"/>
		<delete dir="${BUILD_DIR}"/>
	</target>

	<target name="presetup">
    <fail message=" Flex sdk ${FLEX_HOME}/lib/mxmlc.jar missing.  Download flex sdk to ${FLEX_HOME}">
      <condition>
        <not>
          <resourceexists>
            <!-- Check if flex compiler has been downloaded -->
            <file file="${FLEX_HOME}/lib/mxmlc.jar"/>
          </resourceexists>
        </not>
      </condition>
    </fail>
    <fail message="ESRI Flex viewer files are missing.  Download and extract ESRI Flex viewer files to ${VIEWER_ROOT_DIR}">
      <condition>
        <not>
          <resourceexists>
            <!-- Check if Flex viewer is here -->
            <file file="${VIEWER_ROOT_DIR}/src/com/esri/viewer/managers/WidgetManager.mxml"/>
          </resourceexists>
        </not>
      </condition>
    </fail>
	  <!-- move src files to build src files-->
	  <copy todir="${BUILD_DIR}">
	    <fileset dir="${GEOPROTAL_ROOT_DIR}/src"></fileset>
    </copy>
    <copy todir="${BUILD_DIR}/">
      <fileset dir="${VIEWER_ROOT_DIR}/src"></fileset>
    </copy>
   
    <!-- Some source files in the viewer have a relative assets directory which works in 
	  flex builder but not in the build.  Replace the assets directory string.
	  Also some skins do not have required states. -->
	  <replaceregexp byline="true">
	    <regexp pattern="\(source=&quot;assets\/images"/>
	    <substitution expression="\(source=&quot;\..\/..\/..\/..\/assets\/images"/>
	    <fileset dir="${BUILD_DIR}/com/esri/viewer/">
	      <include name="*/*.as"/>
	      <include name="*/*.mxml"/>
	    </fileset>
	  </replaceregexp>
	  <replaceregexp byline="true">
	    <regexp pattern="&apos;assets\/images"/>
	    <substitution expression="&apos;\..\/..\/..\/..\/assets\/images"/>
	    <fileset dir="${BUILD_DIR}/com/esri/viewer/">
	      <include name="*/*.as"/>
	      <include name="*/*.mxml"/>
	    </fileset>
	  </replaceregexp>
	  <replaceregexp byline="true">
	    <regexp pattern="&apos;assets\/images"/>
	    <substitution expression="&apos;\..\/..\/assets\/images"/>
	    <fileset dir="${BUILD_DIR}/widgets/Draw">
	      <include name="**/*.as"/>
	      <include name="**/*.mxml"/>
	    </fileset>
	    <fileset dir="${BUILD_DIR}/widgets/Edit">
	      <include name="**/*.as"/>
	      <include name="**/*.mxml"/>
	    </fileset>
	  </replaceregexp>
	  <replaceregexp byline="true">
	    <regexp pattern="&lt;s:states&gt;"/>
	    <substitution expression="&lt;s:states&gt;&lt;s:State name=&quot;disabled&quot;/&gt;&lt;s:State name=&quot;normal&quot;/&gt;"/>
	    <fileset dir="${BUILD_DIR}/widgets/HeaderController">
	      <include name="HeaderGroupSkin.mxml"/>
	    </fileset>
    </replaceregexp>
	</target>
	<!--
		Target: compile
		Compiles the main application SWF file. Generates a link report in order for modules to be later
		optimized using it. Includes a single library SWC file.
	-->
	<target name="compile">
		<echo>${FLEX_HOME}/ant/lib/flexTasks.jar</echo>
		<mxmlc 
            file="${BUILD_DIR}/${APP_NAME}.mxml" 
			      debug="false"
            output="${DEPLOY_DIR}/${APP_NAME}.swf"
            actionscript-file-encoding="UTF-8"
            keep-generated-actionscript="false"
			      link-report="MyReport.xml"
            incremental="true">
						
            <!-- Get default compiler options. -->
            <load-config filename="${FLEX_HOME}/frameworks/flex-config.xml"/>

            <!-- List of path elements that form the roots of ActionScript class hierarchies. -->
            <source-path path-element="${FLEX_HOME}/frameworks"/>
            <source-path path-element="${VIEWER_ROOT_DIR}/locale/{locale}"/>

            <!-- List of SWC files or directories that contain SWC files. -->
            <compiler.library-path dir="${FLEX_HOME}/frameworks" append="true">
                <include name="libs" />
                <include name="../bundles/{locale}" />
            </compiler.library-path>
			
			<library-path dir="${LIB_DIR}" append="true">
				<include name="*.swc" />
			</library-path>	

        </mxmlc>

	</target>
	
	<!--
		Target: compile-modules
		Compiles all of the modules in the module directoy into SWF files. Works by calling the
		compile-module target in a for loop on all the file in the module directory.
	-->
	<target name="compile-modules">
	        <propertyregex property="tmpModuleDir"
		               input="${MODULE_DIR}"
		               regexp="/"
		               replace="."
		               global="true" />
                <echo>${tmpModuleDir}</echo>
		<!-- 
			This looks at the module directory and converts it to a list of module names separated by commas
		 	and places it in the variable "flex.modules"
		-->
		<pathconvert property="flex.modules" pathsep=",">
		    <fileset dir="${MODULE_DIR}">
		    	<include name="**/*Widget.mxml"/>
		    </fileset>
			<!-- Strips the module name out of the full path to the module -->

		    <mapper>
		       <mapper type="regexp" from="^(.*)${MODULE_DIR}(.*)(\.mxml)$$" to="\2"/>
		    </mapper>
		</pathconvert>
		<!-- Calls the "compile-module" target and gives it the parameter "moduleName"  -->
		<foreach list="${flex.modules}" delimiter="," parallel="false" param="moduleName" trim="true" target="compile-module"/>
	</target>
	
	<!--
		Target: compile-module
		Takes the full path to the module in the module.path variable, finds the module name, and compiles
		the module optimized for the main application by linking the report XML file.
	-->
	<target name="compile-module">

		<echo>Compiling ${moduleName}</echo>
		<!-- Get the package path to the module from the full path
		<pathconvert property="module.path" pathsep=",">
        	<fileset dir="${MODULE_DIR}">
            	<include name="**/*.mxml"/>
         	</fileset>
         	<mapper>
             	<mapper type="regexp" from="^(.*)[\\|/](src)[\\|/](.*)[\\|/](${moduleName}\.mxml)$$" to="\3"/>
         	</mapper>
     	        </pathconvert>
     	        -->
		<mxmlc 
            file="${BUILD_DIR}/${moduleName}.mxml" 
            output="${DEPLOY_DIR}/${moduleName}.swf"
            actionscript-file-encoding="UTF-8"
            keep-generated-actionscript="false"
			optimize="true"
			debug="false"
			fork="true"
			load-externs="MyReport.xml"
            incremental="false">
            <!-- Get default compiler options. -->
            <load-config filename="${FLEX_HOME}/frameworks/flex-config.xml"/>

            <!-- List of path elements that form the roots of ActionScript class hierarchies. -->
            <source-path path-element="${FLEX_HOME}/frameworks"/>
			
			<compiler.source-path path-element="${BUILD_DIR}"/>
			<compiler.source-path path-element="locale"/>
			<compiler.source-path path-element="${MODULE_DIR}"/>

            <!-- List of SWC files or directories that contain SWC files. -->
            <compiler.library-path dir="${FLEX_HOME}/frameworks" append="true">
                <include name="libs" />
                
            </compiler.library-path>
			
			<library-path dir="${LIB_DIR}" append="true">
				<include name="*.swc" />
			</library-path>	
	    <jvmarg line="-Xms512m -Xmx700m -XX:MaxPermSize=700m -XX:PermSize=512m" />		

        </mxmlc>

	</target>
	
	<!--
		Target: compile-css
		Compiles the CSS file into a SWF file.
	-->
	<target name="compile-css">
		<!-- copy the CSS to the root level because MXMLC will not find embedded relative assets elsewhere -->
		<copy file="src/${STYLE_PATH}/${STYLE}.css" toDir="${BUILD_DIR}"/>
				
		<!-- compile the CSS SWF -->
		<mxmlc 
			file="${BUILD_DIR}/${STYLE}.css" 
			output="${DEPLOY_DIR}/${STYLE_PATH}/${STYLE}.swf"			
			maxmemory="256m" fork="true">
			<compiler.debug>false</compiler.debug>

			<compiler.optimize>true</compiler.optimize>
			<compiler.accessible>false</compiler.accessible>
			<compiler.library-path dir="${FLEX_HOME}/frameworks" append="true">
		           <include name="libs" />
			</compiler.library-path>
			<library-path dir="${LIB_DIR}" append="true">
			   <include name="*.swc" />
			</library-path>
		</mxmlc>
		
		<!-- delete the copy of the CSS file at the root level -->
		<delete file="${BUILD_DIR}/${STYLE}.css"/>
	</target>
	
	<!--
		Target: copy-images
		Copies runtime images into the deployment directory
	-->
	<target name="copy-images">

		<copy todir="${DEPLOY_DIR}/${IMAGE_PATH}">
			<fileset dir="src/${IMAGE_PATH}"/>
		</copy>
	</target>
	
	<!--
		Target: compile-wrapper
		Copies runtime images into the deployment directory
	-->
	<target name="compile-wrapper">
		<copy file="${basedir}/html-template/AC_OETags.js" toFile="${DEPLOY_DIR}/AC_OETags.js" />
		<copy todir="${DEPLOY_DIR}/history">
			<fileset dir="${basedir}/html-template/history"/>

		</copy>
		<copy file="${basedir}/html-template/${HTML_TEMPLATE}" tofile="${DEPLOY_DIR}/${HTML_OUTPUT}" />
		<replace file="${DEPLOY_DIR}/${HTML_OUTPUT}" token="$${swf}" value="${APP_NAME}"/>
		<replace file="${DEPLOY_DIR}/${HTML_OUTPUT}" token="$${width}" value="${WIDTH}"/>
		<replace file="${DEPLOY_DIR}/${HTML_OUTPUT}" token="$${height}" value="${HEIGHT}"/>
		<replace file="${DEPLOY_DIR}/${HTML_OUTPUT}" token="$${bgcolor}" value="${BGCOLOR}"/>
		<replace file="${DEPLOY_DIR}/${HTML_OUTPUT}" token="$${application}" value="${APP_NAME}"/>
		<replace file="${DEPLOY_DIR}/${HTML_OUTPUT}" token="$${version_major}" value="9"/>
		<replace file="${DEPLOY_DIR}/${HTML_OUTPUT}" token="$${version_minor}" value="0"/>

		<replace file="${DEPLOY_DIR}/${HTML_OUTPUT}" token="$${version_revision}" value="124"/>
		<replace file="${DEPLOY_DIR}/${HTML_OUTPUT}" token="$${title}" value="${TITLE}"/>
		<!-- This is for configuring the endpoint -->
		<replace file="${DEPLOY_DIR}/${HTML_OUTPUT}" token="$${endpoint}" value="${ENDPOINT}"/>
		<replace file="${DEPLOY_DIR}/${HTML_OUTPUT}" token="$${destination}" value="${DESTINATION}"/>
		<replace file="${DEPLOY_DIR}/${HTML_OUTPUT}" token="$${source}" value="${SOURCE}"/>
	</target>
	
	<!--
		Target: clean-up
		Cleans up after the build by deleting generated file.
	-->
	<target name="clean-up">

		<delete file="MyReport.xml" />
	</target>
    
</project>